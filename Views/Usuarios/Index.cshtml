@model PaginatedList<Caribbean2.Models.Usuarios>

@{
    ViewData["Title"] = "Index";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/Usuarios.css">

<h1 class="text-center mt-3">Usuarios</h1>

<div class="d-flex justify-content-between align-items-center mb-3">
    <a asp-action="Create" class="btn btn-success btn-sm rounded-pill">
        <i class="fas fa-plus"></i> Crear Nuevo Usuario
    </a>
    
    <form asp-action="Index" method="get" class="d-flex w-50">
        <div class="input-group">
            <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" 
                   class="form-control" placeholder="Buscar usuarios">
            <button class="btn btn-outline-success" type="submit">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </form>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model[0].NombresApellidos)</th>
            <th>@Html.DisplayNameFor(model => model[0].TipoIdentificacion)</th>
            <th>@Html.DisplayNameFor(model => model[0].Identificacion)</th>
            <th>@Html.DisplayNameFor(model => model[0].Telefono)</th>
            <th>@Html.DisplayNameFor(model => model[0].Correo)</th>
            <th>@Html.DisplayNameFor(model => model[0].FechaRegistro)</th>
            <th>@Html.DisplayNameFor(model => model[0].Estado)</th>
            <th>@Html.DisplayNameFor(model => model[0].IdRol)</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model) {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.NombresApellidos)</td>
            <td>@Html.DisplayFor(modelItem => item.TipoIdentificacion)</td>
            <td>@Html.DisplayFor(modelItem => item.Identificacion)</td>
            <td>@Html.DisplayFor(modelItem => item.Telefono)</td>
            <td>@Html.DisplayFor(modelItem => item.Correo)</td>
            <td>@Html.DisplayFor(modelItem => item.FechaRegistro)</td>
            <td style="min-width: 80px; text-align: center;">
                <div class="status-indicator">
                    <span class="status-dot @(item.Estado ? "active" : "inactive")"
                          title="@(item.Estado ? "Activo" : "Inactivo")">
                    </span>
                </div>
            </td>
            <td>@Html.DisplayFor(modelItem => item.IdRol)</td>
            <td>
                <div class="d-flex justify-content-end">
                    <a asp-action="Edit" asp-route-id="@item.UsuarioID" class="btn btn-primary btn-sm me-2">
                        <i class="fas fa-pencil-alt"></i>
                    </a>
                    <a asp-action="Details" asp-route-id="@item.UsuarioID" class="btn btn-info btn-sm me-2">
                        <i class="fas fa-eye"></i>
                    </a>
                    <a asp-action="Delete" asp-route-id="@item.UsuarioID" class="btn btn-danger btn-sm">
                        <i class="fas fa-trash"></i>
                    </a>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        <span>Mostrando página @Model.PageIndex de @Model.TotalPages</span>
    </div>
    <nav>
        <ul class="pagination mb-0">
            @{
                var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                var nextDisabled = !Model.HasNextPage ? "disabled" : "";
            }
            <li class="page-item @prevDisabled">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" 
                   asp-route-searchString="@ViewData["CurrentFilter"]">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            @for (var i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" 
                       asp-route-searchString="@ViewData["CurrentFilter"]">@i</a>
                </li>
            }
            <li class="page-item @nextDisabled">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)"
                   asp-route-searchString="@ViewData["CurrentFilter"]">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        </ul>
    </nav>
</div>

<style>
.pagination {
    margin-bottom: 0;
}

.page-link {
    padding: 0.5rem 0.75rem;
    color: #0d6efd;
    background-color: #fff;
    border: 1px solid #dee2e6;
}

.page-item.active .page-link {
    background-color: #0d6efd;
    border-color: #0d6efd;
    color: white;
}

.page-item.disabled .page-link {
    color: #6c757d;
    pointer-events: none;
    background-color: #fff;
    border-color: #dee2e6;
}

.page-link:focus {
    box-shadow: none;
}

.btn-modern {
    color: #fff;
    text-decoration: none;
    padding: 8px 16px;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
}

.btn-modern:hover {
    color: #f8f9fa;
    text-decoration: none;
}

.btn-modern i {
    margin-right: 5px;
}

.form-switch {
    padding-left: 2.5em;
}

.form-check-input {
    cursor: pointer;
}

.toggle-status:checked {
    background-color: #198754;
    border-color: #198754;
}

.toggle-status:not(:checked) {
    background-color: #dc3545;
    border-color: #dc3545;
}

/* Add these styles for the toggle switch */
.form-switch {
    padding-left: 2.5em;
    position: relative; /* Make container relative */
    min-width: 120px; /* Set minimum width */
}

.form-check-input.toggle-status {
    position: absolute; /* Position absolute within container */
    left: 0;
    cursor: pointer;
    width: 40px; /* Fixed width */
    height: 20px; /* Fixed height */
    margin-left: 0; /* Remove margin */
    pointer-events: auto; /* Ensure clickable */
}

.form-check-label {
    margin-left: 45px; /* Fixed margin from switch */
    user-select: none; /* Prevent text selection */
    display: inline-block;
    min-width: 60px; /* Minimum width for label */
}

/* Style for the switch states */
.toggle-status:checked {
    background-color: #198754;
    border-color: #198754;
    transition: none; /* Remove transition */
}

.toggle-status:not(:checked) {
    background-color: #dc3545;
    border-color: #dc3545;
    transition: none; /* Remove transition */
}

/* Prevent switch movement on focus/hover */
.form-check-input:focus {
    box-shadow: none;
    border-color: inherit;
}

/* Align the switch column */
td .form-switch {
    display: flex;
    align-items: center;
    height: 100%;
}

/* Toggle switch container */
.form-switch {
    padding-left: 2.5em;
    position: relative;
    min-width: 120px;
    display: flex;
    align-items: center;
    height: 100%;
}

/* Toggle button base styles */
.form-check-input.toggle-status {
    position: absolute;
    left: 0;
    cursor: pointer;
    width: 40px;
    height: 20px;
    margin: 0;
    border: none;
    outline: none;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #dc3545;
    border-radius: 20px;
    transition: background-color 0.2s;
}

/* Toggle button thumb */
.form-check-input.toggle-status::before {
    content: '';
    position: absolute;
    left: 2px;
    top: 2px;
    width: 16px;
    height: 16px;
    background-color: #fff;
    border-radius: 50%;
    transform: translateX(0);
    transition: transform 0.2s;
}

/* Active state */
.form-check-input.toggle-status:checked {
    background-color: #198754;
}

.form-check-input.toggle-status:checked::before {
    transform: translateX(20px);
}

/* Label styles */
.form-check-label {
    margin-left: 45px;
    user-select: none;
    font-weight: 500;
    min-width: 60px;
}

/* Remove all focus and hover effects */
.form-check-input.toggle-status:focus,
.form-check-input.toggle-status:active,
.form-check-input.toggle-status:hover {
    outline: none;
    box-shadow: none;
    border: none;
}

.status-indicator {
    display: flex;
    justify-content: center;
    align-items: center;
}

.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
}

.status-dot.active {
    background-color: #198754;
    box-shadow: 0 0 5px #198754;
}

.status-dot.inactive {
    background-color: #dc3545;
    box-shadow: 0 0 5px #dc3545;
}
</style>

<script>
$(document).ready(function() {
    $('.toggle-status').change(function() {
        const checkbox = $(this);
        const userId = checkbox.data('id');
        const newStatus = checkbox.prop('checked');
        
        // Revert the checkbox state until confirmed
        checkbox.prop('checked', !newStatus);
        
        Swal.fire({
            title: '¿Estás seguro?',
            text: `¿Deseas cambiar el estado del usuario a ${newStatus ? 'Activo' : 'Inactivo'}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, cambiar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("ToggleStatus", "Usuarios")',
                    type: 'POST',
                    data: { 
                        id: userId,
                        status: newStatus
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            checkbox.prop('checked', newStatus);
                            $(checkbox).siblings('label').text(newStatus ? 'Activo' : 'Inactivo');
                            Swal.fire(
                                '¡Actualizado!',
                                'El estado ha sido actualizado.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error',
                                response.message,
                                'error'
                            );
                        }
                    },
                    error: function() {
                        Swal.fire(
                            'Error',
                            'No se pudo actualizar el estado',
                            'error'
                        );
                    }
                });
            }
        });
    });

    $('#logoutButton').click(function(e) {
        e.preventDefault();
        Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas cerrar sesión?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, cerrar sesión',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Logout", "Usuarios")';
            }
        });
    });
});
</script>